'use server';

import { z } from 'zod';
import Airtable from 'airtable';
import { MemberFormSchema, MemberFormValues } from '@/types/member';
import { generateAetherId } from '@/lib/id-generator';
import { sendWelcomeEmail } from '@/lib/email';
import { TABLE_IDS, FIELDS } from '@/lib/airtable-schema';
import crypto from 'crypto';

// Initialize Airtable
const airtableBase = new Airtable({
  apiKey: process.env.AIRTABLE_API_KEY,
}).base(process.env.AIRTABLE_BASE_ID!);
const membersTable = TABLE_IDS.MEMBERS;


export async function createMember(data: MemberFormValues) {
  try {
    // 1. Validate data
    const validatedData = MemberFormSchema.parse(data);

    // 2. Check for existing member
    const existingRecords = await airtableBase(membersTable)
      .select({
        filterByFormula: `{${FIELDS.MEMBERS.EMAIL}} = "${validatedData.email}"`,
      })
      .firstPage();

    if (existingRecords.length > 0) {
      return {
        success: false,
        error: 'This email address has already been registered.',
      };
    }

    // 3. Generate Aether ID and activation token
    const { aetherId, entryNumber } = await generateAetherId(airtableBase, membersTable, 'Community');
    const activationToken = crypto.randomBytes(32).toString('hex');
    const activationTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours from now

    // 4. Create new record in Airtable
    const [newRecord] = await airtableBase(membersTable).create([
      {
        fields: {
          [FIELDS.MEMBERS.FULL_NAME]: validatedData.fullName,
          [FIELDS.MEMBERS.EMAIL]: validatedData.email,
          [FIELDS.MEMBERS.INSTITUTION]: validatedData.institution,
          [FIELDS.MEMBERS.LOCATION]: validatedData.location,
          [FIELDS.MEMBERS.STATUS]: 'Pending',
          [FIELDS.MEMBERS.ENTRY_NUMBER]: entryNumber,
          [FIELDS.MEMBERS.AETHER_ID]: aetherId,
          [FIELDS.MEMBERS.ACTIVATION_TOKEN]: activationToken,
          [FIELDS.MEMBERS.ACTIVATION_TOKEN_EXPIRES]: activationTokenExpires.toISOString(),
          [FIELDS.MEMBERS.ROLE]: 'Community',
        },
      },
    ]);
    
    // This is the ID generated by Airtable for the record itself
    const createdAetherId = newRecord.fields[FIELDS.MEMBERS.AETHER_ID] as string;


    // 5. Send welcome email
    await sendWelcomeEmail({
        to: validatedData.email,
        name: validatedData.fullName,
        aetherId: createdAetherId,
        token: activationToken,
        type: 'welcome'
    });

    return {
      success: true,
      aetherId: createdAetherId,
    };
  } catch (error) {
    console.error('Error creating member:', error);
    if (error instanceof z.ZodError) {
      return { success: false, error: 'Invalid data provided.' };
    }
    return {
      success: false,
      error: 'An unexpected error occurred. Please try again later.',
    };
  }
}
