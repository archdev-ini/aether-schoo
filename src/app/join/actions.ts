
'use server';

import { z } from 'zod';
import Airtable from 'airtable';
import { MemberFormSchema, MemberFormValues } from '@/types/member';
import { TABLE_IDS, FIELDS } from '@/lib/airtable-schema';

// This is a placeholder for the actual ID generation and email logic.
// In a real app, you would integrate with your ID generation service
// and email provider (e.g., Resend, Nodemailer).

async function generateAetherIdPlaceholder(base: any, tableId: string) {
    const records = await base(tableId).select({ fields: [] }).all();
    const entryNumber = records.length + 1;
    // This is a placeholder. The real ID will be generated by an Airtable formula.
    return { aetherId: `AETH-TEMP-${entryNumber}`, entryNumber };
}

async function sendWelcomeEmailPlaceholder(data: { to: string; name: string; aetherId: string; }) {
    console.log('--- Sending Welcome Email (Placeholder) ---');
    console.log('To:', data.to);
    console.log('Name:', data.name);
    console.log('AetherID:', data.aetherId);
    console.log('-----------------------------------------');
    // In a real implementation, this would use a service like Nodemailer or Resend.
    return Promise.resolve();
}


export async function createMember(data: MemberFormValues) {
  // Airtable API Key and Base ID should be in environment variables
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const membersTableId = TABLE_IDS.MEMBERS;

  if (!apiKey || !baseId) {
    console.error('Airtable API Key or Base ID is not configured.');
    return {
      success: false,
      error: 'Server configuration error. Please contact support.',
    };
  }

  const airtableBase = new Airtable({ apiKey }).base(baseId);

  try {
    // 1. Validate data
    const validatedData = MemberFormSchema.parse(data);

    // 2. Check for existing member
    const existingRecords = await airtableBase(membersTableId)
      .select({
        filterByFormula: `{${FIELDS.MEMBERS.EMAIL}} = "${validatedData.email}"`,
      })
      .firstPage();

    if (existingRecords.length > 0) {
      return {
        success: false,
        error: 'This email address has already been registered.',
      };
    }

    // 3. Generate a placeholder entry number
    const { entryNumber } = await generateAetherIdPlaceholder(airtableBase, membersTableId);

    // 4. Create new record in Airtable
    // The AETHER_ID is generated by a formula in Airtable.
    const [newRecord] = await airtableBase(membersTableId).create([
      {
        fields: {
          [FIELDS.MEMBERS.FULL_NAME]: validatedData.fullName,
          [FIELDS.MEMBERS.EMAIL]: validatedData.email,
          [FIELDS.MEMBERS.INSTITUTION]: validatedData.institution,
          [FIELDS.MEMBERS.LOCATION]: validatedData.location,
          [FIELDS.MEMBERS.STATUS]: 'Pending',
          [FIELDS.MEMBERS.ENTRY_NUMBER]: entryNumber,
          [FIELDS.MEMBERS.ROLE]: 'Community',
        },
      },
    ]);
    
    // The actual ID is returned from Airtable after creation
    const createdAetherId = newRecord.fields[FIELDS.MEMBERS.AETHER_ID] as string;

    // 5. Send welcome email (placeholder)
    await sendWelcomeEmailPlaceholder({
        to: validatedData.email,
        name: validatedData.fullName,
        aetherId: createdAetherId,
    });

    return {
      success: true,
      aetherId: createdAetherId,
    };
  } catch (error) {
    console.error('Error creating member:', error);
    if (error instanceof z.ZodError) {
      return { success: false, error: 'Invalid data provided.' };
    }
    return {
      success: false,
      error: 'An unexpected error occurred. Please try again later.',
    };
  }
}
